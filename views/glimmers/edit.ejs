<%- layout('layouts/boilerplate') %>

<style>
    /* General Form Styling (can be moved to style.css) */
    .form-container-retro {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - var(--navbar-height, 80px) - var(--footer-height, 60px));
        padding: 20px;
        background-color: var(--retro-bg);
    }

    .form-card-retro {
        background-color: var(--retro-primary-teal);
        border: 4px solid var(--retro-shadow-dark);
        border-radius: 15px;
        box-shadow: 0.5em 0.5em 0 var(--retro-accent-red);
        padding: 2.5rem;
        max-width: 600px; /* Wider for forms */
        width: 100%;
        text-align: center;
        position: relative;
        overflow: hidden;
        z-index: 1;
        animation: bounceIn 0.8s ease-out;
    }

    .form-card-retro::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image:
            repeating-linear-gradient(45deg, rgba(0,0,0,0.05) 0, rgba(0,0,0,0.05) 1px, transparent 1px, transparent 10px),
            repeating-linear-gradient(-45deg, rgba(0,0,0,0.05) 0, rgba(0,0,0,0.05) 1px, transparent 1px, transparent 10px);
        background-size: 10px 10px;
        opacity: 0.1;
        z-index: 0;
    }

    .form-content {
        position: relative;
        z-index: 1;
    }

    .form-title-retro {
        font-family: var(--font-heading-retro);
        color: var(--retro-accent-yellow);
        font-size: 2em;
        margin-bottom: 1.5rem;
        text-shadow: 2px 2px 0 var(--retro-shadow-dark);
        text-align: center;
    }

    .form-label-retro {
        font-family: var(--font-heading-retro);
        color: var(--retro-secondary-light);
        font-size: 0.9em;
        margin-bottom: 0.5rem;
        display: block;
        text-align: left;
        text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.3);
    }

    .form-control-retro {
        background-color: var(--retro-bg);
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 8px;
        padding: 0.8em 1em;
        color: var(--retro-text);
        font-family: var(--font-primary);
        font-size: 1em;
        width: 100%;
        box-sizing: border-box;
        margin-bottom: 1rem;
        transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
        box-shadow: 0.2em 0.2em 0 var(--retro-shadow-dark);
    }

    .form-control-retro:focus {
        border-color: var(--retro-accent-yellow);
        box-shadow: 0.2em 0.2em 0 var(--retro-accent-red);
        outline: none;
    }

    .btn-retro-submit {
        background-color: var(--retro-accent-red);
        color: var(--retro-secondary-light);
        font-family: var(--font-heading-retro);
        font-size: 1.1em;
        padding: 0.8em 1.5em;
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 8px;
        box-shadow: 0.3em 0.3em 0 var(--retro-shadow-dark);
        cursor: pointer;
        transition: all var(--transition-fast);
        width: 100%;
        margin-top: 1rem;
    }

    .btn-retro-submit:hover {
        background-color: var(--retro-accent-yellow);
        color: var(--retro-text);
        transform: translateY(-3px);
        box-shadow: 0.4em 0.4em 0 var(--retro-shadow-dark);
    }

    .invalid-feedback-retro {
        color: var(--retro-accent-red);
        font-family: var(--font-primary);
        font-size: 0.85em;
        text-align: left;
        margin-top: -0.8rem; /* Adjust to sit closer to input */
        margin-bottom: 1rem;
        display: none; /* Hidden by default */
    }
    .was-validated .form-control-retro:invalid + .invalid-feedback-retro {
        display: block; /* Show on invalid */
    }
    .was-validated .form-control-retro:invalid {
        border-color: var(--retro-accent-red);
        box-shadow: 0.2em 0.2em 0 var(--retro-accent-red);
    }
    .was-validated .form-control-retro:valid {
        border-color: #28a745; /* Bootstrap green for valid */
    }

    /* Date input specific styling */
    input[type="date"].form-control-retro {
        -webkit-appearance: none; /* Remove default date picker icon */
        -moz-appearance: none;
        appearance: none;
        padding-right: 2.5em; /* Space for custom icon */
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%231F2937" class="bi bi-calendar" viewBox="0 0 16 16"><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM14 4V3a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1h12zM2 5v9h12V5H2z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 0.8em center;
        background-size: 1.2em;
    }

    /* Image Preview */
    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 1rem;
        margin-bottom: 1rem;
        justify-content: center;
        border: 2px dashed var(--retro-shadow-dark);
        padding: 10px;
        border-radius: 8px;
        background-color: rgba(0,0,0,0.05);
    }

    .image-preview-item {
        position: relative;
        width: 100px;
        height: 100px;
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 5px;
        overflow: hidden;
        box-shadow: 0.15em 0.15em 0 rgba(0,0,0,0.2);
    }

    .image-preview-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-image-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: var(--retro-accent-red);
        color: var(--retro-secondary-light);
        border: 1px solid var(--retro-shadow-dark);
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 0.8em;
        cursor: pointer;
        line-height: 1;
        padding: 0;
        box-shadow: 0.1em 0.1em 0 rgba(0,0,0,0.2);
        transition: background-color var(--transition-fast);
    }

    .remove-image-btn:hover {
        background-color: var(--retro-shadow-dark);
    }

    .image-upload-feedback {
        font-family: var(--font-primary);
        font-size: 0.85em;
        color: var(--retro-text);
        margin-top: -0.8rem; /* Adjust to sit closer to input */
        margin-bottom: 1rem;
        text-align: center;
    }

    /* Map Preview */
    .map-preview-container {
        width: 100%;
        height: 250px; /* Fixed height for map preview */
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1rem;
        box-shadow: 0.2em 0.2em 0 var(--retro-shadow-dark);
    }
    .map-preview-container iframe {
        width: 100%;
        height: 100%;
        border: none;
    }
</style>

<div class="form-container-retro">
    <div class="form-card-retro">
        <div class="form-content">
            <h1 class="form-title-retro">EDIT GLIMMER</h1>
            <form action="/glimmers/<%= glimmer._id %>?_method=PUT" method="POST" class="needs-validation" novalidate enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="title" class="form-label-retro">GLIMMER TITLE</label>
                    <input type="text" class="form-control-retro" id="title" name="glimmer[title]" value="<%= glimmer.title %>" required>
                    <div class="invalid-feedback-retro">
                        Please provide a title for your Glimmer.
                    </div>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label-retro">DESCRIPTION</label>
                    <textarea class="form-control-retro" id="description" name="glimmer[description]" rows="5" required><%= glimmer.description %></textarea>
                    <div class="invalid-feedback-retro">
                        Please provide a detailed description.
                    </div>
                </div>

                <div class="mb-3">
                    <label for="locationName" class="form-label-retro">LOCATION NAME</label>
                    <input type="text" class="form-control-retro" id="locationName" name="glimmer[locationName]" value="<%= glimmer.locationName %>" required>
                    <div class="invalid-feedback-retro">
                        Where will this Glimmer take place?
                    </div>
                </div>

                <!-- Geolocation Inputs -->
                <div class="mb-3">
                    <label for="latitude" class="form-label-retro">LATITUDE</label>
                    <input type="number" step="any" class="form-control-retro" id="latitude" name="glimmer[latitude]" value="<%= glimmer.geometry.coordinates[1] %>" required>
                    <div class="invalid-feedback-retro">
                        Please provide the latitude.
                    </div>
                </div>
                <div class="mb-3">
                    <label for="longitude" class="form-label-retro">LONGITUDE</label>
                    <input type="number" step="any" class="form-control-retro" id="longitude" name="glimmer[longitude]" value="<%= glimmer.geometry.coordinates[0] %>" required>
                    <div class="invalid-feedback-retro">
                        Please provide the longitude.
                    </div>
                </div>
                <div class="map-preview-container">
                    <% 
                        const mapLat = glimmer.geometry.coordinates[1];
                        const mapLon = glimmer.geometry.coordinates[0];
                        const googleMapsApiKey = 'YOUR_GOOGLE_MAPS_API_KEY'; // Replace with your actual API key
                        const mapSrc = `https://www.google.com/maps/embed/v1/place?key=${googleMapsApiKey}&q=${mapLat},${mapLon}&zoom=15`;
                    %>
                    <iframe id="mapPreview" width="600" height="450" style="border:0" loading="lazy" allowfullscreen src="<%= mapSrc %>"></iframe>
                </div>
                <p class="image-upload-feedback">Adjust latitude/longitude to update map preview.</p>

                <% 
                    // Format date and time for input fields
                    const glimmerStartDate = new Date(glimmer.startDate);
                    const formattedDate = glimmerStartDate.toISOString().split('T')[0];
                    const formattedTime = glimmerStartDate.toTimeString().split(' ')[0].substring(0, 5); // HH:MM
                %>

                <div class="mb-3">
                    <label for="startDate" class="form-label-retro">START DATE</label>
                    <input type="date" class="form-control-retro" id="startDate" name="glimmer[eventDate]" value="<%= formattedDate %>" required>
                    <div class="invalid-feedback-retro">
                        When does this Glimmer start?
                    </div>
                </div>

                <div class="mb-3">
                    <label for="startTime" class="form-label-retro">START TIME</label>
                    <input type="time" class="form-control-retro" id="startTime" name="glimmer[eventTime]" value="<%= formattedTime %>" required>
                    <div class="invalid-feedback-retro">
                        What time does this Glimmer start?
                    </div>
                </div>

                <div class="mb-3">
                    <label for="images" class="form-label-retro">UPLOAD NEW GLIMMER IMAGES (MAX 5)</label>
                    <input type="file" class="form-control-retro" id="images" name="image" accept="image/*" multiple> <!-- name changed to 'image' -->
                    <div class="invalid-feedback-retro">
                        Please upload at least one image for your Glimmer.
                    </div>
                    <p class="image-upload-feedback" id="imageUploadFeedback">Existing images will be replaced by new uploads.</p>
                </div>

                <% if (glimmer.image && glimmer.image.length > 0) { %>
                    <div class="image-preview-container" id="currentImagesPreview">
                        <% glimmer.image.forEach(img => { %>
                            <div class="image-preview-item">
                                <img src="<%= img.url %>" alt="Current Glimmer Image">
                                <button type="button" class="remove-image-btn" data-image-url="<%= img.url %>" data-image-filename="<%= img.filename %>">&times;</button>
                            </div>
                        <% }) %>
                    </div>
                    <p class="image-upload-feedback">Current Images (will be replaced if new images are uploaded)</p>
                <% } %>
                
                <button type="submit" class="btn-retro-submit">UPDATE GLIMMER</button>
            </form>

            <div class="back-link-section">
                <p>GO BACK TO GLIMMER DETAILS?</p>
                <a href="/glimmers/<%= glimmer._id %>">VIEW GLIMMER</a>
                <p class="mt-3">GO BACK TO YOUR HOSTED GLIMMERS?</p>
                <a href="/trail/sparks">VIEW SPARKS</a>
            </div>
        </div>
    </div>
</div>

<script>
    // IMPORTANT: Replace 'YOUR_GOOGLE_MAPS_API_KEY' with your actual Google Maps Embed API Key
    const GOOGLE_MAPS_API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY'; 
    const MAX_IMAGES = 5; // Define maximum number of images

    // Function to update the map preview
    const updateMapPreview = () => {
        const latitudeInput = document.getElementById('latitude');
        const longitudeInput = document.getElementById('longitude');
        const mapPreview = document.getElementById('mapPreview');
        const lat = parseFloat(latitudeInput.value);
        const lon = parseFloat(longitudeInput.value);

        if (!isNaN(lat) && !isNaN(lon) && googleMapsApiKey) {
            const mapSrc = `https://www.google.com/maps/embed/v1/place?key=${googleMapsApiKey}&q=${lat},${lon}&zoom=15`;
            mapPreview.src = mapSrc;
        } else {
            mapPreview.src = ""; // Clear map if coordinates are invalid or no API key
        }
    };

    // Client-side validation for the form
    (function () {
        'use strict';

        var forms = document.querySelectorAll('.needs-validation');
        const latitudeInput = document.getElementById('latitude');
        const longitudeInput = document.getElementById('longitude');
        const imageInput = document.getElementById('images'); // Corrected ID to 'image'
        const imageUploadFeedback = document.getElementById('imageUploadFeedback');
        const customFileUploadLabel = document.querySelector('.custom-file-upload');
        const uploadedFiles = new DataTransfer(); // To manage files programmatically

        // Add event listeners for coordinate changes
        latitudeInput.addEventListener('input', updateMapPreview);
        longitudeInput.addEventListener('input', updateMapPreview);

        // Initial map load
        updateMapPreview();

        // Populate uploadedFiles with existing images on load
        // This is crucial for the image count logic to work correctly on edit.
        const currentImagesPreview = document.getElementById('currentImagesPreview');
        if (currentImagesPreview) {
            const existingImageElements = currentImagesPreview.querySelectorAll('img');
            existingImageElements.forEach((imgElement, index) => {
                // Create a dummy File object for existing images.
                // This is a simplification; a more robust solution might involve
                // passing original file metadata from the backend.
                // For now, we just need to count them for the MAX_IMAGES limit.
                const dummyFile = new File([], `existing-image-${index}.png`, { type: 'image/png' });
                uploadedFiles.items.add(dummyFile);
            });
            updateFileInputAndButton(); // Update button state based on existing images
        }


        // Function to update the file input and the upload button's enabled/disabled state
        function updateFileInputAndButton() {
            // imageInput.files = uploadedFiles.files; // No longer needed directly for single file input
            if (uploadedFiles.items.length >= MAX_IMAGES) {
                imageInput.disabled = true; // Disable the file input
                customFileUploadLabel.classList.add('disabled'); // Add disabled style to label
                imageUploadFeedback.textContent = `Maximum of ${MAX_IMAGES} images reached. Remove some to upload more.`;
                imageUploadFeedback.style.display = 'block';
            } else {
                imageInput.disabled = false; // Enable the file input
                customFileUploadLabel.classList.remove('disabled'); // Remove disabled style
                imageUploadFeedback.style.display = 'none'; // Hide feedback if below limit
            }
        }

        imageInput.addEventListener('change', function(event) {
            const files = event.target.files;
            
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                // Only add if it's an image and we haven't reached the max limit
                if (file.type.startsWith('image/') && uploadedFiles.items.length < MAX_IMAGES) {
                    uploadedFiles.items.add(file); // Add to our managed list

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const previewItem = document.createElement('div');
                        previewItem.className = 'image-preview-item';
                        previewItem.dataset.name = file.name; // Store original file name for removal

                        previewItem.innerHTML = `
                            <img src="${e.target.result}" alt="Image Preview">
                            <button type="button" class="remove-image-btn" data-image-url="${e.target.result}" data-image-filename="${file.name}">&times;</button>
                        `;
                        imagePreviewContainer.appendChild(previewItem);
                    };
                    reader.readAsDataURL(file);
                } else if (uploadedFiles.items.length >= MAX_IMAGES) {
                    // If trying to add more than allowed, show feedback and stop
                    imageUploadFeedback.textContent = `You can upload a maximum of ${MAX_IMAGES} images.`;
                    imageUploadFeedback.style.display = 'block';
                    break; // Stop processing further files from this selection
                }
            }
            updateFileInputAndButton(); // Update input and button state after adding files
            event.target.value = ''; // Clear the original file input value
        });

        imagePreviewContainer.addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-image-btn')) { // Corrected class name
                const itemToRemove = event.target.closest('.image-preview-item');
                const fileName = itemToRemove.dataset.name;

                // Remove from DataTransfer object
                for (let i = 0; i < uploadedFiles.items.length; i++) {
                    if (uploadedFiles.items[i].name === fileName) {
                        uploadedFiles.items.remove(i);
                        break;
                    }
                }
                
                itemToRemove.remove(); // Remove from DOM
                updateFileInputAndButton(); // Update input and button state after removal
            }
        });


        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    // Client-side validation for image count on submit
                    if (uploadedFiles.items.length === 0) {
                        event.preventDefault();
                        event.stopPropagation();
                        imageUploadFeedback.textContent = "At least one image is required.";
                        imageUploadFeedback.style.display = 'block';
                    } else if (uploadedFiles.items.length > MAX_IMAGES) {
                        event.preventDefault();
                        event.stopPropagation();
                        imageUploadFeedback.textContent = `You can upload a maximum of ${MAX_IMAGES} images.`;
                        imageUploadFeedback.style.display = 'block';
                    } else {
                        imageUploadFeedback.style.display = 'none';
                    }

                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
    })();
</script>
